// <auto-generated />
using System;
using EdiplanDotnetAPI.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EdiplanDotnetAPI.Persistence.Migrations
{
    [DbContext(typeof(EdiplanDbContext))]
    [Migration("20240613191723_initMigration")]
    partial class initMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("AssetIds");

            modelBuilder.Entity("AssetBooking", b =>
                {
                    b.Property<int>("AssetsId")
                        .HasColumnType("integer");

                    b.Property<int>("BookingsId")
                        .HasColumnType("integer");

                    b.HasKey("AssetsId", "BookingsId");

                    b.HasIndex("BookingsId");

                    b.ToTable("AssetBooking");
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Common.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"AssetIds\"')");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RateUnit")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.AssetGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentGroupId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ParentGroupId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentGroupId1");

                    b.ToTable("asset_group", (string)null);
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProductionId");

                    b.ToTable("booking", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 7, 6, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(858),
                            LocationId = new Guid("e19d79c7-58d6-4906-ba7a-3507a2e90f09"),
                            Name = "",
                            Notes = "High-speed internet required for remote editing.",
                            ProductionId = new Guid("4050a623-5308-4640-8c36-493729f6f884"),
                            StartDate = new DateTime(2024, 6, 15, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(847),
                            Status = "provisional"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 7, 20, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(906),
                            Name = "",
                            Notes = "Need access to soundproof dubbing studio.",
                            ProductionId = new Guid("709bf680-7cc8-406c-bb8d-13ace00d4fe7"),
                            StartDate = new DateTime(2024, 7, 13, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(898),
                            Status = "provisional"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 6, 3, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(930),
                            LocationId = new Guid("71e40a55-2430-4a68-8adc-f78a1ef2c8c2"),
                            Name = "",
                            Notes = "Final editing phase.",
                            ProductionId = new Guid("709bf680-7cc8-406c-bb8d-13ace00d4fe7"),
                            StartDate = new DateTime(2024, 5, 29, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(929),
                            Status = "confirmed"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 6, 8, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(964),
                            LocationId = new Guid("189d7685-bdf0-4a39-9750-7720ec6044c9"),
                            Name = "",
                            Notes = "Location scouting.",
                            ProductionId = new Guid("3cbedfd3-a8b1-43b2-9ccb-67ec980118a6"),
                            StartDate = new DateTime(2024, 4, 13, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(952),
                            Status = "confirmed"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 4, 3, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(990),
                            LocationId = new Guid("5e10152d-dd1b-49a2-bc95-79246ee8ca8a"),
                            Name = "",
                            Notes = "Principal photography.",
                            ProductionId = new Guid("d7af2c8c-525e-41ad-b379-edad3de1defe"),
                            StartDate = new DateTime(2024, 3, 13, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(989),
                            Status = "confirmed"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 8, 18, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(1022),
                            LocationId = new Guid("189d7685-bdf0-4a39-9750-7720ec6044c9"),
                            Name = "",
                            Notes = "Pre-production meetings.",
                            ProductionId = new Guid("3cbedfd3-a8b1-43b2-9ccb-67ec980118a6"),
                            StartDate = new DateTime(2024, 8, 13, 19, 17, 22, 757, DateTimeKind.Utc).AddTicks(1021),
                            Status = "confirmed"
                        });
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.BookingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("booking_group", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Offline"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Online"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dub - In House"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Grade"
                        });
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e19d79c7-58d6-4906-ba7a-3507a2e90f09"),
                            Name = "True North Productions, Leeds",
                            Notes = ""
                        },
                        new
                        {
                            Id = new Guid("71e40a55-2430-4a68-8adc-f78a1ef2c8c2"),
                            Name = "Picture Shop, Manchester",
                            Notes = ""
                        },
                        new
                        {
                            Id = new Guid("5e10152d-dd1b-49a2-bc95-79246ee8ca8a"),
                            Name = "The Crown Production Office, London",
                            Notes = ""
                        },
                        new
                        {
                            Id = new Guid("189d7685-bdf0-4a39-9750-7720ec6044c9"),
                            Name = "Top Gear Production Office, London",
                            Notes = ""
                        });
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Production", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("production", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4050a623-5308-4640-8c36-493729f6f884"),
                            Name = "Teen Mom UK Series 10"
                        },
                        new
                        {
                            Id = new Guid("709bf680-7cc8-406c-bb8d-13ace00d4fe7"),
                            Name = "The Great British Bake Off!"
                        },
                        new
                        {
                            Id = new Guid("3cbedfd3-a8b1-43b2-9ccb-67ec980118a6"),
                            Name = "Top Gear Special"
                        },
                        new
                        {
                            Id = new Guid("d7af2c8c-525e-41ad-b379-edad3de1defe"),
                            Name = "The Crown Season 5"
                        });
                });

            modelBuilder.Entity("asset_group_map", b =>
                {
                    b.Property<int>("AssetGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("AssetsId")
                        .HasColumnType("integer");

                    b.HasKey("AssetGroupsId", "AssetsId");

                    b.HasIndex("AssetsId");

                    b.ToTable("asset_group_map");
                });

            modelBuilder.Entity("booking_group_map", b =>
                {
                    b.Property<int>("BookingGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("BookingsId")
                        .HasColumnType("integer");

                    b.HasKey("BookingGroupsId", "BookingsId");

                    b.HasIndex("BookingsId");

                    b.ToTable("booking_group_map");
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Equipment", b =>
                {
                    b.HasBaseType("EdiplanDotnetAPI.Domain.Common.Asset");

                    b.Property<string>("AssetNumber")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Make")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<decimal?>("Value")
                        .HasColumnType("numeric");

                    b.ToTable("equipment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony FX6",
                            Type = "equipment",
                            AssetNumber = "12442",
                            Description = "Faulty lense.",
                            Make = "Sony",
                            Model = "FX-6",
                            Value = 1000m
                        },
                        new
                        {
                            Id = -2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edit01",
                            Type = "equipment",
                            AssetNumber = "12452",
                            Description = "Offline machine",
                            Make = "Hewlett-Packard",
                            Model = "Z4 G4",
                            Value = 1000m
                        },
                        new
                        {
                            Id = -3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edit02",
                            Type = "equipment",
                            AssetNumber = "12432",
                            Description = "Offline machine",
                            Make = "Hewlett-Packard",
                            Model = "Z4 G4",
                            Value = 1000m
                        },
                        new
                        {
                            Id = -4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edit03",
                            Type = "equipment",
                            AssetNumber = "13352",
                            Description = "Offline machine",
                            Make = "Hewlett-Packard",
                            Model = "Z4 G4",
                            Value = 1000m
                        },
                        new
                        {
                            Id = -5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edit04",
                            Type = "equipment",
                            AssetNumber = "23452",
                            Description = "Online machine",
                            Make = "Hewlett-Packard",
                            Model = "Z8 G4",
                            Value = 2000m
                        });
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Person", b =>
                {
                    b.HasBaseType("EdiplanDotnetAPI.Domain.Common.Asset");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasIndex("ProductionId");

                    b.ToTable("person", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jeremy Cutnice",
                            Type = "person",
                            Address = "23 Maple Street, Sheffield, S1 2AB",
                            Email = "jeremy.cutnice@tvfunmail.com",
                            IsStaff = false,
                            PhoneNumber = "07700 123456",
                            Role = "Offline editor"
                        },
                        new
                        {
                            Id = -7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Melanie Editswel",
                            Type = "person",
                            Address = "45 Oak Avenue, Manchester, M2 3CD",
                            Email = "melanie.editswel@postprolol.com",
                            IsStaff = false,
                            PhoneNumber = "07701 234567",
                            Role = "Offline editor"
                        },
                        new
                        {
                            Id = -8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Daphne Showmaker",
                            Type = "person",
                            Address = "12 Willow Crescent, Birmingham, B3 4EF",
                            Email = "daphne.showmaker@tvantics.org",
                            IsStaff = false,
                            PhoneNumber = "07702 345678",
                            Role = "Offline editor"
                        },
                        new
                        {
                            Id = -9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Percival Televisington-Smythe",
                            Type = "person",
                            Address = "8 Birch Lane, Newcastle, NE4 5FG",
                            Email = "percival.ts@televisingtonsmythe.net",
                            IsStaff = false,
                            PhoneNumber = "07703 456789",
                            Role = "Offline editor"
                        },
                        new
                        {
                            Id = -10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dave Programly",
                            Type = "person",
                            Address = "36 Elm Close, Liverpool, L5 6GH",
                            Email = "dave.programly@tvgeekery.co.uk",
                            IsStaff = false,
                            PhoneNumber = "07704 567890",
                            Role = "Offline editor"
                        });
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Room", b =>
                {
                    b.HasBaseType("EdiplanDotnetAPI.Domain.Common.Asset");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("UsedFor")
                        .HasColumnType("text");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("AssetBooking", b =>
                {
                    b.HasOne("EdiplanDotnetAPI.Domain.Common.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.AssetGroup", b =>
                {
                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.AssetGroup", "ParentGroup")
                        .WithMany()
                        .HasForeignKey("ParentGroupId1");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Booking", b =>
                {
                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.Location", "Location")
                        .WithMany("Bookings")
                        .HasForeignKey("LocationId");

                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.Production", "Production")
                        .WithMany("Bookings")
                        .HasForeignKey("ProductionId");

                    b.Navigation("Location");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("asset_group_map", b =>
                {
                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.AssetGroup", null)
                        .WithMany()
                        .HasForeignKey("AssetGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EdiplanDotnetAPI.Domain.Common.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("booking_group_map", b =>
                {
                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.BookingGroup", null)
                        .WithMany()
                        .HasForeignKey("BookingGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Person", b =>
                {
                    b.HasOne("EdiplanDotnetAPI.Domain.Entities.Production", null)
                        .WithMany("People")
                        .HasForeignKey("ProductionId");
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Location", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("EdiplanDotnetAPI.Domain.Entities.Production", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
